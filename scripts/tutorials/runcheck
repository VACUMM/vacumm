#!/usr/bin/env python
"""This script run all tutorial script to check if they work

Help:

    check --help
"""

# Parse arguments
from argparse import ArgumentParser
import sys, os
from time import time as _time_
parser = ArgumentParser(
    description="Check the execution of tutorials.\n\n[pattern] defaults to *.py.",)
parser.add_argument('pattern', default='*.py', help='file pattern  [%(default)s]',
    nargs='*')
parser.add_argument('-e', '--exclude', action='append',
    help='add a glob pattern to exclude')
parser.add_argument('-l', '--loglevel',
    choices=['debug', 'info', 'error'], default='info',
    help='logging level to console [%(default)s]')
parser.add_argument('-c', '--cfgfile', default='check.cfg', help='configuration file')
args = parser.parse_args()

# Retreive the list of scripts
include = []
from glob import glob
# - include
if not isinstance(args.pattern, list):
    args.pattern = [args.pattern]
for pat in args.pattern:
    include.extend(glob(pat))
include = [os.path.abspath(fn) for fn in include]
# - exclude
if args.exclude is None:
    args.exclude = ['check.py']
if args.exclude is not None:
    exclude = []
    for pat in args.exclude:
        exclude.extend(glob(pat))
    exclude = [os.path.abspath(fn) for fn in exclude] + [os.path.abspath(__file__)]
    files = []
    for fn in include:
        if fn not in exclude:
            files.append(fn)
else:
    files = include
files.sort()

# Setup the logger
import logging
logfile = '.'.join([os.path.splitext(__file__)[0], 'log'])
if os.path.exists(logfile):
    os.remove(logfile)
logger = logging.getLogger('RUNCHECK')
file = logging.FileHandler(logfile)
file.setFormatter(
    logging.Formatter('%(asctime)s: %(name)s [%(levelname)-8s] %(message)s',
        '%Y-%m-%d %H:%M'))
console = logging.StreamHandler()
console.setFormatter(logging.Formatter('%(name)s [%(levelname)-8s] %(message)s'))
file.setLevel('DEBUG')
console.setLevel(args.loglevel.upper())
logger.setLevel('DEBUG')
logger.addHandler(file)
logger.addHandler(console)

# Warnings
import warnings
for message in [
        r'The ishold function was deprecated',
        r'setting an item on a masked array which has a shared mask',
        r'The set_axis_bgcolor function was deprecated',
        r'The get_axis_bgcolor function was deprecated',
        r'axes.hold is deprecated',
        r'converting a masked element to nan',
        r'comparison to `None` will result',
        r'using a non-integer number instead of an integer',
        r'The matplotlib.delaunay module was deprecated in version',
        r'Warning: converting a masked element to nan',
        r'get_axes has been deprecated in ',
        ]:
    warnings.filterwarnings('ignore', message)

# Redirections
class Redirector(object):
    def __init__(self, func, prefix=''):
        self.func = func
        self.prefix = prefix
    def write(self, buf):
        self.func(self.prefix+buf.rstrip().strip('\n'))
    def flush(self):
        pass
class Warner(object):
    def __init__(self, logger):
        self.logger = logger
    def showwarning(self, message, category, filename, lineno,
            file=None):
        self.logger.warning(
            'REDIRECTED: %s:%s: %s:%s',
            filename, lineno,
            category.__name__, message,
        )
#old_sys_stdout = sys.stdout
#old_sys_stderr = sys.stderr
#old_showwarnings = warnings.showwarning
sys.stdout = Redirector(logger.debug, 'STDOUT: ')
sys.stderr = Redirector(logger.warning, 'STDERR: ')
warnings.showwarning = Warner(logger).showwarning


# Run them all
from matplotlib import use ; use('Agg')
from matplotlib.pyplot import close
import subprocess, traceback
igood = 0
ibad = 0
PWD = os.getcwd()
for script in files:
    base_script = os.path.basename(script)
    if os.path.realpath(script)==os.path.realpath(__file__):
        logger.debug('{}: {}'.format(base_script, 'SKIPPED'))
        continue
    if os.getcwd()!=PWD:
        xxx
    os.chdir(PWD)
    sys.argv = [script]
    logger.debug('Trying {}...'.format(base_script))
    t0_ = _time_()
#    execfile(script, {'__file__':script})
    try:
        execfile(script, {'__file__':script})
        close()
        igood +=1
        result = 'OK'
        report_func = logger.info
    except:
        ibad +=1
        logger.debug(traceback.format_exc())
        result = 'FAILED'
        report_func = logger.error
    report_func('{}: {} [{:.1f}s]'.format(base_script, result, _time_()-t0_))

# Finalize
gb = []
if igood:
    gb.append('%i OK'%igood)
if ibad:
    gb.append('%i FAILED'%ibad)
msg = 'Results (%i checks): %s'%(igood+ibad, ', '.join(gb))
logger.info(msg)

## Clean redirections
#sys.stdout = old_sys_stdout
#sys.stderr = old_sys_stderr
#warnings.showwarning = old_showwarnings
