#!/usr/bin/env python
"""This script run all tutorial script to check if they work

Help:

    runcheck --help
"""

from past.builtins import execfile
from builtins import object
from argparse import ArgumentParser
import sys
import os
from time import time as _time_
from glob import glob
import traceback
import logging
import warnings
from matplotlib import rcdefaults, pyplot as P
from configparser import ConfigParser


# Parse arguments
parser = ArgumentParser(
    description="Check the execution of tutorials.\n\n[pattern] "
    "defaults to *.py.",)
parser.add_argument('pattern', default='*.py',
                    help='file pattern  [%(default)s]',
                    nargs='*')
parser.add_argument('-e', '--exclude', action='append',
                    help='add a glob pattern to exclude')
parser.add_argument('-l', '--loglevel',
                    choices=['debug', 'info', 'error'], default='info',
                    help='logging level to console [%(default)s]')
parser.add_argument('-x', '--exit-on-failed', action='store_true',
                    help='exit as soon as a script fails')
parser.add_argument('-c', '--cfgfile', default='check.cfg',
                    help='configuration file')
args = parser.parse_args()

# Configuration
config = ConfigParser()
config.read(args.cfgfile)

# Retreive the list of scripts
include = []
# - include
if not isinstance(args.pattern, list):
    args.pattern = [args.pattern]
for pat in args.pattern:
    include.extend(glob(pat))
include = [os.path.abspath(fn) for fn in include]
# - exclude
if args.exclude is None:
    args.exclude = []
if "exclude" in config['DEFAULT']:
    args.exclude.extend(config['DEFAULT']['exclude'].split())
if args.exclude:
    exclude = []
    for pat in args.exclude:
        exclude.extend(glob(pat))
    exclude = [os.path.abspath(fn) for fn in exclude] + \
        [os.path.abspath(__file__)]
    files = []
    for fn in include:
        if fn not in exclude and not os.path.samefile(__file__, fn):
            files.append(fn)
else:
    files = include
files.sort()

# Setup the logger
logfile = '.'.join([os.path.splitext(__file__)[0], 'log'])
if os.path.exists(logfile):
    os.remove(logfile)
logger = logging.getLogger('RUNCHECK')
file = logging.FileHandler(logfile)
file.setFormatter(
    logging.Formatter(
            '%(asctime)s: %(name)s [%(levelname)-8s] %(message)s',
            '%Y-%m-%d %H:%M'))
console = logging.StreamHandler()
console.setFormatter(
        logging.Formatter('%(name)s [%(levelname)-8s] %(message)s'))
file.setLevel('DEBUG')
console.setLevel(args.loglevel.upper())
logger.setLevel('DEBUG')
logger.addHandler(file)
logger.addHandler(console)

# Warnings
for message in [
        r'The ishold function was deprecated',
        r'setting an item on a masked array which has a shared mask',
        r'The set_axis_bgcolor function was deprecated',
        r'The get_axis_bgcolor function was deprecated',
        r'axes.hold is deprecated',
        r'converting a masked element to nan',
        r'comparison to `None` will result',
        r'using a non-integer number instead of an integer',
        r'The matplotlib.delaunay module was deprecated in version',
        r'Warning: converting a masked element to nan',
        r'get_axes has been deprecated in ',
        r'The following kwargs were',
        r'The axesPatch function was deprecated',
        r'Using a non-tuple sequence',
        ]:
    warnings.filterwarnings('ignore', message)


# Redirections


class Redirector(object):

    def __init__(self, func, prefix=''):
        self.func = func
        self.prefix = prefix

    def write(self, buf):
        self.func(self.prefix+buf.rstrip().strip('\n'))

    def flush(self):
        pass


class Warner(object):

    def __init__(self, logger):
        self.logger = logger

    def showwarning(self, message, category, filename, lineno,
                    file=None, *args, **kwargs):
        self.logger.warning(
            'REDIRECTED: %s:%s: %s:%s',
            filename, lineno,
            category.__name__, message,
        )


#old_sys_stdout = sys.stdout
#old_sys_stderr = sys.stderr
#old_showwarnings = warnings.showwarning
sys.stdout = Redirector(logger.debug, 'STDOUT: ')
sys.stderr = Redirector(logger.warning, 'STDERR: ')
warnings.showwarning = Warner(logger).showwarning


# Run them all
rcdefaults()
igood = 0
ibad = 0
PWD = os.getcwd()
T0 = _time_()
for script in files:
    base_script = os.path.basename(script)
    if os.path.realpath(script) == os.path.realpath(__file__):
        logger.debug('{}: {}'.format(base_script, 'SKIPPED'))
        continue
    os.chdir(PWD)
    sys.argv = [script]
    if 'args' in config.sections() and base_script in config['args'].keys():
        sys.argv.extend(config['args'][base_script].split())
    logger.debug('Trying {}...'.format(base_script))
    t0_ = _time_()
#    execfile(script, {'__file__':script})
    try:
        exec(open(script).read(), None, {'__file__': script})
        igood += 1
        result = 'OK'
        report_func = logger.info
    except Exception:
        ibad += 1
        logger.debug(traceback.format_exc())
        result = 'FAILED'
        report_func = logger.error
    P.close()
    report_func('{}: {} [{:.1f}s]'.format(base_script, result, _time_()-t0_))
    rcdefaults()
    if result == 'FAILED' and args.exit_on_failed:
        report_func('Exiting...')
        sys.exit(1)

# Finalize
gb = []
if igood:
    gb.append('{} OK'.format(igood))
if ibad:
    gb.append('{} FAILED'.format(ibad))
msg = 'Results ({} checks in {:.0f}s): {}'.format(igood+ibad,
               _time_()-T0, ', '.join(gb))
logger.info(msg)

## Clean redirections
#sys.stdout = old_sys_stdout
#sys.stderr = old_sys_stderr
#warnings.showwarning = old_showwarnings
